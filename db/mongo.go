package db

import (
	"fmt"
	"os"
	"path"
	"strings"
	"text/template"

	"github.com/wanjm/gos/basic"
	"gorm.io/gorm"
)

// func GenMongo() {
// 	mongoGenCfgs := []MongoGenCfg{
// 		{
// 			ModulePath: "gitlab.plaso.cn/yxt_server/resource-ai-convert/business/homework",
// 			OutPath:    "/Volumes/vm/myfile/git/yxt_server/resource-ai-convert/business/homework",
// 			TableNames: []string{"nzuoyes", "ai_hwl_correct_result"},
// 		},
// 		{
// 			ModulePath: "gitlab.plaso.cn/yxt_server/resource-ai-convert/business/resource",
// 			OutPath:    "/Volumes/vm/myfile/git/yxt_server/resource-ai-convert/business/resource",
// 			TableNames: []string{"file_common"},
// 		},
// 	}

//		for _, config := range mongoGenCfgs {
//			GenMongoModule(config)
//		}
//	}
func GenTableForMongo(config *basic.DBConfig, moduleMap map[string]struct{}) {
	for _, cfg := range config.DbGenCfgs {
		if _, ok := moduleMap[cfg.ModulePath]; ok {
			GenMongoModule(cfg, nil, config.DBName)
		}
	}
}
func GenMongoModule(mongoGenCfg *basic.TableGenCfg, db *gorm.DB, dbName string) {
	generator := MongoGenerator{}
	var sb strings.Builder
	sb.WriteString(generator.PrepareDal(mongoGenCfg.ModulePath))
	for _, tableName := range mongoGenCfg.TableNames {
		fileContent := generator.GenDal(toCamelCase(tableName, true), tableName, dbName)
		sb.WriteString(fileContent)
	}
	err := os.WriteFile(path.Join(mongoGenCfg.OutPath, "dal/mongo.gen.go"), []byte(sb.String()), 0644)
	if err != nil {
		panic(err)
	}
}

type MongoGenerator struct {
}

func (gen *MongoGenerator) PrepareDal(businessPath string) string {
	return fmt.Sprintf(`// Code generated by gorm.io/gen. DO NOT EDIT.
package dal

import (
	"context"
    "%s/entity"
	"%s"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)
`, businessPath, basic.Cfg.Generation.CommonMod)
}
func (gen *MongoGenerator) GenDal(modelName, tableName, dbVariableName string) string {
	type info struct {
		TableName    string
		RawTableName string
		DBVariable   string
	}
	codeTemplate := `
// {{.RawTableName}}
//
// @gos autogen
type {{.TableName}}Dal struct {
	{{.DBVariable}} *mongo.Database
}

func (a *{{.TableName}}Dal) getDB() *mongo.Collection {
	return a.{{.DBVariable}}.Collection("{{.RawTableName}}")
}


// Create 创建
func (a *{{.TableName}}Dal) Create(ctx context.Context, item *entity.{{.TableName}}) error {
	db := a.getDB()
	result, err := db.InsertOne(ctx, item)
	if err != nil {
		common.Error(ctx, "insert record to mongo {{.RawTableName}} failed", common.Err(err))
		return err
	}
	if oid, ok := result.InsertedID.(primitive.ObjectID); ok {
		item.ID = oid
	} else {
		common.Error(ctx, "insert record to mongo {{.TableName}} failed as inserted_id is not objectid")
	}
	return nil
}

func (a *{{.TableName}}Dal) GetAll(ctx context.Context, opts []common.Optioner, cols ...[]string) (item []*entity.{{.TableName}}, err error) {
	filter := common.GenMongoOption(opts)
	db := a.getDB()
	projection := bson.M{}
	if len(cols) > 0 {
		for _, col := range cols[0] {
			projection[col] = 1
		}
	}
	// 执行查询
	var cur *mongo.Cursor
	cur, err = db.Find(ctx, filter, options.Find().SetProjection(projection))

	if err != nil {
		common.Error(ctx, "GetAll from mongo {{.RawTableName}} failed", common.Err(err))
		return nil, err
	}
	defer cur.Close(ctx)
	err = cur.All(ctx, &item)
	return
}

func (a *{{.TableName}}Dal) GetOne(ctx context.Context, options []common.Optioner, cols ...[]string) (item *entity.{{.TableName}}, err error) {
	res, err := a.GetAll(ctx, options, cols...)
	if err != nil {
		return
	}
	if len(res) > 0 {
		item = res[0]
	}
	return
}

func (a *{{.TableName}}Dal) GetOneById(ctx context.Context, id primitive.ObjectID, cols ...[]string) (item *entity.{{.TableName}}, err error) {
	return a.GetOne(ctx, []common.Optioner{common.Eq("_id", id)}, cols...)
}
func (a *{{.TableName}}Dal) Update(ctx context.Context, opts []common.Optioner, updates any) (err error) {
	filter := common.GenMongoOption(opts)
	db := a.getDB()
	_, err = db.UpdateMany(ctx, filter, bson.M{"$set": updates})
	if err != nil {
		common.Error(ctx, "update mongo record {{.RawTableName}} failed", common.Err(err))
		return err
	}
	return
}
`
	var data = info{
		TableName:    modelName,
		RawTableName: tableName,
		DBVariable:   dbVariableName,
	}
	tpl, err := template.New("common").Parse(codeTemplate)
	if err != nil {
		// 处理模板解析错误
		panic(err)
	}
	var content strings.Builder
	if err := tpl.Execute(&content, data); err != nil {
		// 处理模板执行错误
		panic(err)
	}
	return content.String()
}
