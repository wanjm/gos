package db

import (
	"fmt"
	"os"
	"path"
	"strings"

	"github.com/wanjm/gos/astbasic"
	"github.com/wanjm/gos/basic"
	"gorm.io/gen"
	"gorm.io/gorm"
)

func GenTables(config1 *basic.TableGenCfg, db *gorm.DB, dbVariable string) {
	dbVariable = astbasic.Capitalize(dbVariable)
	config := gen.Config{
		OutPath:      path.Join(config1.OutPath, "entity"),      // 生成代码的输出路径
		Mode:         gen.WithoutContext | gen.WithDefaultQuery, // 生成模式
		ModelPkgPath: "entity",
	}
	var tm = map[string]func(gorm.ColumnType) string{
		// 匹配数据库类型为 TINYINT 的字段
		"tinyint": func(columnType gorm.ColumnType) (jsonType string) {
			// 返回 Go 类型为 int8，JSON 序列化类型也为 int8
			return "int32"
		},
	}
	config.WithDataTypeMap(tm)
	config.WithJSONTagNameStrategy(func(columnName string) string {
		return toCamelCase(columnName, false)
	})
	g := gen.NewGenerator(config)

	// 连接数据库
	g.UseDB(db)

	// 生成所有表的模型
	var sb strings.Builder
	sb.WriteString(PrepareDal(config1.ModulePath))
	for _, tableName := range config1.TableNames {
		a := g.GenerateModel(tableName)
		_ = a
		// sb.WriteString(genMysqlDal(a.ModelStructName, tableName, dbVariable))
	}
	os.WriteFile(path.Join(config1.OutPath, "dal/mysql.gen.go"), []byte(sb.String()), 0644)
	// 执行生成
	g.Execute()
}
func PrepareDal(businessPath string) string {
	return fmt.Sprintf(`// Code generated by gorm.io/gen. DO NOT EDIT.
package dal

import (
	"context"
	"%s/entity"
	"%s"
	"gorm.io/gorm"
)
`, businessPath, basic.Cfg.Generation.CommonMod)
}
