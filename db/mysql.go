package db

import (
	"fmt"
	"html/template"
	"os"
	"path"
	"strings"

	"github.com/wanjm/gos/basic"
	"github.com/wanjm/gos/tool"
	"gorm.io/driver/mysql"
	"gorm.io/gen"
	"gorm.io/gorm"
)

func GenTableForDb(config *basic.DBConfig, moduleMap map[string]struct{}) {
	db, _ := gorm.Open(mysql.Open(config.DSN), &gorm.Config{})
	for _, cfg := range config.DbGenCfgs {
		if _, ok := moduleMap[cfg.ModulePath]; ok {
			GenTables(cfg, db, config.DBName)
		}
	}
}

func GenTables(config1 *basic.TableGenCfg, db *gorm.DB, dbVariable string) {
	dbVariable = tool.Capitalize(dbVariable)
	config := gen.Config{
		OutPath:      path.Join(config1.OutPath, "entity"),      // 生成代码的输出路径
		Mode:         gen.WithoutContext | gen.WithDefaultQuery, // 生成模式
		ModelPkgPath: "entity",
	}
	var tm = map[string]func(gorm.ColumnType) string{
		// 匹配数据库类型为 TINYINT 的字段
		"tinyint": func(columnType gorm.ColumnType) (jsonType string) {
			// 返回 Go 类型为 int8，JSON 序列化类型也为 int8
			return "int32"
		},
	}
	config.WithDataTypeMap(tm)
	config.WithJSONTagNameStrategy(func(columnName string) string {
		return toCamelCase(columnName, false)
	})
	g := gen.NewGenerator(config)

	// 连接数据库
	g.UseDB(db)

	// 生成所有表的模型
	var sb strings.Builder
	sb.WriteString(PrepareDal(config1.ModulePath))
	for _, tableName := range config1.TableNames {
		a := g.GenerateModel(tableName)
		sb.WriteString(genMysqlDal(a.ModelStructName, tableName, dbVariable))
	}
	os.WriteFile(path.Join(config1.OutPath, "dal/mysql.gen.go"), []byte(sb.String()), 0644)
	// 执行生成
	g.Execute()
}
func PrepareDal(businessPath string) string {
	return fmt.Sprintf(`// Code generated by gorm.io/gen. DO NOT EDIT.
package dal

import (
	"context"
	"%s/entity"
	"%s"
	"gorm.io/gorm"
)
`, businessPath, basic.Cfg.Generation.CommonMod)
}
func genMysqlDal(modelName, tableName, dbVariableName string) string {
	type info struct {
		TableName    string
		RawTableName string
		DBVariable   string
	}
	codeTemplate := `
// {{.RawTableName}}
//
// @gos autogen
type {{.TableName}}Dal struct {
	{{.DBVariable}} *gorm.DB
}

func (a *{{.TableName}}Dal) getDB(ctx context.Context) *gorm.DB {
	return a.{{.DBVariable}}.WithContext(ctx).Table("{{.RawTableName}}")
}
func (c *{{.TableName}}Dal) getDBOperation(context context.Context) common.DbOperation {
	return common.DbOperation{
		Db:        c.{{.DBVariable}},
		TableName: "{{.RawTableName}}",
		Context:   context,
	}
}

// Create 创建
func (a *{{.TableName}}Dal) Create(ctx context.Context, item *entity.{{.TableName}}) error {
	dbOperation := a.getDBOperation(ctx)
	err := dbOperation.Create(item)
	if err != nil {
		common.Error(ctx, "insert data to {{.RawTableName}} failed", common.Err(err))
	}
	return err
}

func (a *{{.TableName}}Dal) GetAll(ctx context.Context, options []common.Optioner) (item []*entity.{{.TableName}}, err error) {
	dbOperation := a.getDBOperation(ctx)
	err = dbOperation.Query(
		&common.SqlQueryOptions{
			QueryFields: options,
		},
		&item,
	)
	if err != nil {
		//添加log，打印错误日志；
		common.Error(ctx, "GetAll DB record from {{.RawTableName}} failed", common.Err(err))
	}
	return
}

func (a *{{.TableName}}Dal) GetOne(ctx context.Context, options []common.Optioner) (item *entity.{{.TableName}}, err error) {
	res, err := a.GetAll(ctx, options)
	if err != nil {
		return
	}
	if len(res) > 0 {
		item = res[0]
	}
	return
}

func (a *{{.TableName}}Dal) GetOneById(ctx context.Context, id int32) (item *entity.{{.TableName}}, err error) {
	return a.GetOne(ctx, []common.Optioner{common.Eq("id", id)})
}

func (a *{{.TableName}}Dal) List(ctx context.Context, option []common.Optioner, pageNo, pageSize int32) (list []*entity.{{.TableName}}, total int64, err error) {
	dbop := a.getDBOperation(ctx)
	err = dbop.QueryCV(
		&common.SqlQueryOptions{
			QueryFields: option,
			Offset:      int(pageNo * pageSize),
			Limit:       int(pageSize),
			OrderFields: []common.OrderByParam{
				{
					Field:     "create_time",
					Direction: common.DESCStr,
				},
			},
		},
		&total,
		&list,
	)
	if err != nil {
		//添加log，打印错误日志；
		common.Error(ctx, "List record of {{.RawTableName}} failed", common.Err(err))
	}
	return
}

// Update
func (a *{{.TableName}}Dal) Update(ctx context.Context, options []common.Optioner, updates any) (err error) {
	op := a.getDBOperation(ctx)
	err = op.Update(&common.SqlUpdateOptions{
		QueryFields: options,
		Updates:     updates,
	})
	if err != nil {
		//添加log，打印错误日志；
		common.Error(ctx, "Update record of {{.RawTableName}} failed", common.Err(err))
	}
	return
}

func (a *{{.TableName}}Dal) UpdateById(ctx context.Context, id int32, updates any) error {
	return a.Update(ctx, []common.Optioner{common.Eq("id", id)}, updates)
}

func (a *{{.TableName}}Dal) Delete(ctx context.Context, options []common.Optioner) error {
	op := a.getDBOperation(ctx)
	err := op.Delete(options)
	if err != nil {
		common.Error(ctx, "Delete record of {{.RawTableName}} failed", common.Err(err))
	}
	return err
}

func (a *{{.TableName}}Dal) DeleteByIds(ctx context.Context, ids []int32) error {
	return a.Delete(ctx, []common.Optioner{common.In("id", ids)})
}
`
	var data = info{
		TableName:    modelName,
		RawTableName: tableName,
		DBVariable:   dbVariableName,
	}
	tpl, err := template.New("common").Parse(codeTemplate)
	if err != nil {
		// 处理模板解析错误
		panic(err)
	}
	var content strings.Builder
	if err := tpl.Execute(&content, data); err != nil {
		// 处理模板执行错误
		panic(err)
	}
	return content.String()
}
